from func import get_cost
import pytest

'''Тестовый сценарий с вводом загрузки'''
@pytest.mark.parametrize("path_len, size, delicate, workload, expected", [
    # Проверка на корректный расчет стоимости
    (1.5, 'b', True, 1.6, 880),  # Расстояние < 2, габариты 'b', хрупкость, очень высокая загрузка
    (9.5, 'b', False, 1.4, 420),  # Расстояние < 10, габариты 'b', без хрупкости, высокая загрузка
    (25, 's', True, 1, 600),    # Расстояние < 30, габариты 's', хрупкость, стандартная загрузка
    (35, 'b', False, 1.4, 700),   # Расстояние > 30, габариты 'b', без хрупкости, высокая загрузка
    (1, 's', False, 1, 400),  # Расстояние < 2, габариты 's', без хрупкости, стандартная загрузка

    # Проверка на ошибки ввода
    (-5, 's', False, 1.0, "Некорректное значение расстояние"),  # Отрицательное расстояние
    (15, 'm', False, 1.0, "Некорректные габариты"),             # Некорректные габариты
    (40, 's', True, 1.0, "Хрупкие грузы нельзя возить на расстояние более 30 км"),  # Хрупкий груз на большое расстояние
    ("10", 's', False, 1.0, "Некорректный тип расстояния"),     # Неверный тип расстояния
    (10, 10, False, 1.0, "Некорректный тип габаритов"),         # Неверный тип габаритов
    (10, 's', "True", 1.0, "Некорректный тип хрупкости"),       # Неверный тип хрупкости
    (10, 's', False, "1.0", "Некорректный тип загрузки"),       # Неверный тип загрузки

    # Граничные случаи
    (2, 'b', True, 1.0, 550),    # Расстояние == 2
    (10, 's', True, 1.0, 500),    # Расстояние == 10
    (30, 'b', False, 1.0, 400),   # Расстояние == 30
])
def test_get_cost_with_workload(path_len, size, delicate, workload, expected):
    assert get_cost(path_len, size, delicate, workload) == expected


'''Тестовый сценарий без ввода загрузки'''
@pytest.mark.parametrize("path_len, size, delicate, expected", [
    # Проверка на корректный расчет стоимости
    (9.5, 'b', False, 400),  # Расстояние < 10, габариты 'b', без хрупкости
    (25, 's', True, 600),    # Расстояние < 30, габариты 's', хрупкость

    # Проверка на ошибки ввода
    (-5, 's', False, "Некорректное значение расстояние"),  # Отрицательное расстояние
    (15, 'm', False, "Некорректные габариты"),             # Некорректные габариты
    (40, 's', True, "Хрупкие грузы нельзя возить на расстояние более 30 км"),  # Хрупкий груз на большое расстояние
    ("10", 's', False, "Некорректный тип расстояния"),     # Неверный тип расстояния
    (10, 10, False, "Некорректный тип габаритов"),         # Неверный тип габаритов
    (10, 's', "True", "Некорректный тип хрупкости"),       # Неверный тип хрупкости

    # Граничные случаи
    (2, 'b', True, 550),    # Расстояние == 2
    (10, 's', True, 500),    # Расстояние == 10
    (30, 'b', False, 400),   # Расстояние == 30
])
def test_get_cost_without_workload(path_len, size, delicate, expected):
    assert get_cost(path_len, size, delicate) == expected